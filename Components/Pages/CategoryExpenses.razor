@page "/expenses/category/{CategoryId:int}"
@rendermode InteractiveServer
@using ExpenseTracker.Components.Data.Models
@using ExpenseTracker.Components.Services
@inject ExpenseService ExpenseService
@inject CategoryService CategoryService
@inject NavigationManager Navigation

<PageTitle>@categoryName Expenses</PageTitle>

<style>
    /* Reuse styles from the Expenses page for consistency */
    .glass-container {
        background: rgba(255, 255, 255, 0.3);
        backdrop-filter: blur(30px);
        -webkit-backdrop-filter: blur(30px);
        border: 1px solid rgba(255, 255, 255, 0.4);
        border-radius: 20px;
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.1);
        padding: 24px;
        margin-bottom: 20px;
    }

    .glass-table {
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(20px);
        -webkit-backdrop-filter: blur(20px);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        overflow: hidden;
    }

    .apple-title {
        font-weight: 600;
        color: #1d1d1f;
        letter-spacing: -0.022em;
    }

    .apple-subtitle {
        color: #86868b;
        font-weight: 400;
    }

    .expense-row {
        background: rgba(255, 255, 255, 0.4);
        backdrop-filter: blur(15px);
        border: none;
        transition: all 0.2s ease;
        cursor: pointer;
    }

        .expense-row:hover {
            background: rgba(255, 255, 255, 0.6);
            transform: translateY(-1px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }

        .expense-row td {
            border: none;
            padding: 16px 12px;
            vertical-align: middle;
        }

    .expense-amount {
        font-weight: 700;
        color: #1d1d1f;
        font-size: 1.1rem;
    }

    .expense-date {
        color: #86868b;
        font-size: 0.9rem;
    }

    .badge-planned {
        background: linear-gradient(135deg, #34c759, #28a745);
        color: white;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .badge-unplanned {
        background: linear-gradient(135deg, #8e8e93, #6d6d70);
        color: white;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .apple-btn {
        border-radius: 12px;
        font-weight: 500;
        padding: 10px 20px;
        border: none;
        transition: all 0.2s ease;
        font-size: 0.9rem;
    }

    .apple-btn-primary {
        background: #007aff;
        color: white;
    }

        .apple-btn-primary:hover {
            background: #0056cc;
            transform: translateY(-1px);
        }
</style>

<div class="container-fluid px-4 py-5" style="max-width: 1200px;">
    <!-- Header -->
    <div class="text-center mb-5">
        <h1 class="apple-title" style="font-size: 2.8rem; margin-bottom: 0.5rem;">
            Expenses in "@categoryName"
        </h1>
        <p class="apple-subtitle" style="font-size: 1.1rem;">
            Review all expenses for this category
        </p>
        <button class="apple-btn apple-btn-primary mt-3" @onclick="GoBack">
            ⬅️ Back to All Expenses
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.3;">⏳</div>
            <h4 style="color: #86868b; font-weight: 500;">Loading expenses...</h4>
        </div>
    }
    else if (expenses == null || expenses.Count == 0)
    {
        <div class="text-center py-5">
            <div style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.3;">💸</div>
            <h4 style="color: #86868b; font-weight: 500;">No expenses found for this category</h4>
        </div>
    }
    else
    {
        <!-- Expenses Table -->
        <div class="glass-table">
            <table class="table table-borderless mb-0">
                <thead style="background: rgba(0, 0, 0, 0.02); border-bottom: 1px solid rgba(0, 0, 0, 0.05);">
                    <tr>
                        <th style="padding: 16px 12px; font-weight: 600; color: #86868b; font-size: 0.85rem; text-transform: uppercase; letter-spacing: 0.5px;">Title</th>
                        <th style="padding: 16px 12px; font-weight: 600; color: #86868b; font-size: 0.85rem; text-transform: uppercase; letter-spacing: 0.5px;">Date</th>
                        <th style="padding: 16px 12px; font-weight: 600; color: #86868b; font-size: 0.85rem; text-transform: uppercase; letter-spacing: 0.5px;">Type</th>
                        <th style="padding: 16px 12px; font-weight: 600; color: #86868b; font-size: 0.85rem; text-transform: uppercase; letter-spacing: 0.5px; text-align: right;">Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var expense in expenses)
                    {
                        <tr class="expense-row">
                            <td>@expense.Title</td>
                            <td class="expense-date">@expense.Date.ToString("dd MMM yyyy")</td>
                            <td>
                                <span class="@(expense.Planned ? "badge-planned" : "badge-unplanned")">
                                    @(expense.Planned ? "📋 Planned" : "⚡ Unplanned")
                                </span>
                            </td>
                            <td style="text-align: right;" class="expense-amount">
                                @expense.Amount.ToString("N2") RON
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    [Parameter]
    public int CategoryId { get; set; }

    private string categoryName = string.Empty;
    private List<Expense> expenses;
    private bool isLoading = true;

    protected override void OnInitialized()
    {
        LoadCategoryExpenses();
    }

    private void LoadCategoryExpenses()
    {
        var category = CategoryService.findCategoryById(CategoryId);
        if (category != null)
        {
            categoryName = category.Name;
            expenses = ExpenseService.findExpensesByCategoryId(CategoryId);
        }
        else
        {
            categoryName = "Unknown Category";
            expenses = new List<Expense>();
        }
        isLoading = false;
        StateHasChanged();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/expenses");
    }
}
