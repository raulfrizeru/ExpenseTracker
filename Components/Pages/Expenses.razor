@page "/expenses"
@rendermode InteractiveServer
@using ExpenseTracker.Components.Data.Models
@using ExpenseTracker.Components.Services
@inject ExpenseService Service;
@inject NavigationManager Navigation;

<h3>Expenses</h3>

<div class="mb-3">
	<label for="filter" class="form-label fw-bold">Filter expenses:</label>
	<select id="filter" class="form-select w-auto d-inline-block" @onchange="OnFilterChanged">
		<option value="All" selected>All</option>
		<option value="Planned">Planned</option>
		<option value="Unplanned">Unplanned</option>
	</select>
</div>

<div class="alert alert-info">
	Total Expenses: <strong>@GetTotalFilteredExpenses().ToString("C")</strong>
</div>

<table class="table table-striped">
	<thead>
		<tr>
			<th>Title</th>
			<th>Date</th>
			<th>Amount</th>
			<th>Planned</th>
			<th>Category</th>
			<th>Actions</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var expense in filteredExpenses)
		{
			<tr>
				<td>@expense.Title</td>
				<td>@expense.Date.ToShortDateString()</td>
				<td>@expense.Amount.ToString("C")</td>
				<td>@(expense.Planned ? "Yes" : "No")</td>
				<td>@(expense.Category?.Name ?? "Uncategorized")</td>
				<td>
					<button class="btn btn-secondary" @onclick="()=>EditExpense(expense)">Edit</button>
					<button class="btn btn-danger mb-3" @onclick="() => DeleteExpense(expense.Id)">Delete</button>
				</td>
			</tr>
		}
	</tbody>
</table>
<button class="btn btn-success mb-3" @onclick="GoToAddExpense">Add New Expense</button>

@code {
	List<Expense> expenses = new List<Expense>();
	List<Expense> filteredExpenses = new List<Expense>();
	string selectedFilter = "All";

	public void LoadExpenses()
	{
		expenses=Service.findAllExpenses().ToList();
	}
	protected override void OnInitialized()
	{
		LoadExpenses();
		ApplyFilter();
	}
	private void ApplyFilter()
	{
		if (selectedFilter == "Planned")
		{
			filteredExpenses = expenses.Where(e => e.Planned).ToList();
		}
		else if (selectedFilter == "Unplanned")
		{
			filteredExpenses = expenses.Where(e => !e.Planned).ToList();
		}
		else // All
		{
			filteredExpenses = expenses;
		}
	}
	private void OnFilterChanged(ChangeEventArgs e)
	{
		selectedFilter = e.Value?.ToString() ?? "All";
		ApplyFilter();
		StateHasChanged();
	}
	private void GoToAddExpense()
	{
		Navigation.NavigateTo("/expenses/new");
	}
	private void EditExpense(Expense expense)
	{
		Navigation.NavigateTo($"/expenses/{expense.Id}");
	}
	private void DeleteExpense(int? id)
	{
		var expenseToDelete= expenses.FirstOrDefault(e => e.Id == id);
		if (expenseToDelete != null)
		{
			Service.removeExpense(expenseToDelete);
			LoadExpenses();
			StateHasChanged();
		}
	}
	private decimal GetTotalFilteredExpenses()
	{
		return filteredExpenses.Sum(e => e.Amount);
	}
}
