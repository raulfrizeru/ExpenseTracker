@page "/"
@rendermode InteractiveServer
@using ExpenseTracker.Components.Data.Models
@using ExpenseTracker.Components.Services
@inject IncomeService IncomeService
@inject ExpenseService ExpenseService
@inject CategoryService CategoryService

<PageTitle>Expense Tracker</PageTitle>

<div class="container text-center my-5">
    <h1 class="mb-3">Expense Tracker</h1>
    <p class="lead">Welcome to your new expense tracking app!</p>

    <!-- Balance -->
    <div class="my-4">
        <h5>Balance</h5>
        <h2 style="font-weight:bold;" class="@GetBalanceClass()">
            @GetBalance().ToString("N2") RON
        </h2>
    </div>

    <div class="row justify-content-center mt-5">
        <!-- Incomes -->
        <div class="col-md-4 text-start">
            <h4 class="text-success">Incomes</h4>
            <p class="text-muted">@GetIncomesDateRange()</p>
            <h3 class="fw-bold">@totalIncome.ToString("N2") RON</h3>
            <p class="mt-2 text-muted">Current Month</p>
            <h5>@currMonthIncome.ToString("N2") RON</h5>
        </div>

        <!-- Expenses -->
        <div class="col-md-4 text-start">
            <h4 class="text-danger">Expenses</h4>
            <p class="text-muted">@GetExpensesDateRange()</p>
            <h3 class="fw-bold">@totalExpense.ToString("N2") RON</h3>
            <p class="mt-2 text-muted">Current Month</p>
            <h5>@currMonthExpense.ToString("N2") RON</h5>
        </div>
        <!-- Planned -->
        <div class="col-md-4 text-start">
            <h5>Planned Expenses</h5>
            <h4 style="font-weight:bold;" class="col-md-4 text-start">
                @ExpenseService.findPlannedExpenses() RON
            </h4>
        </div>
        <!-- Unplanned -->
        <div class="col-md-4 text-start">
            <h5>Unplanned Expenses</h5>
            <h4 style="font-weight:bold;" class="col-md-4 text-start">
                @ExpenseService.findUnplannedExpenses() RON
            </h4>
        </div>
    </div>
   
</div>

@code {
    List<Income> incomes = new();
    List<Expense> expenses = new();
    List<Category> categories = new();
    decimal totalIncome = 0;
    decimal totalExpense = 0;
    decimal currMonthIncome = 0;
    decimal currMonthExpense = 0;

    protected override void OnInitialized()
    {
        incomes = IncomeService.findAllIncomes();
        expenses = ExpenseService.findAllExpenses();
        categories = CategoryService.findAllCategories();
        totalIncome = IncomeService.getTotalIncome();
        totalExpense = ExpenseService.getTotalExpense();
        currMonthIncome = IncomeService.getCurrentMonthIncome();
        currMonthExpense = ExpenseService.getCurrentMonthExpense();
    }

    private decimal GetBalance()
    {
        return totalIncome - totalExpense;
    }

    private string GetBalanceClass()
    {
        return GetBalance() >= 0 ? "text-success" : "text-danger";
    }

    private string GetIncomesDateRange()
    {
        if (incomes.Count == 0) return "No incomes yet";
        var start = incomes.Min(i => i.Date).ToString("dd MMM yyyy");
        var end = incomes.Max(i => i.Date).ToString("dd MMM yyyy");
        return $"{start} - {end}";
    }

    private string GetExpensesDateRange()
    {
        if (expenses.Count == 0) return "No expenses yet";
        var start = expenses.Min(e => e.Date).ToString("dd MMM yyyy");
        var end = expenses.Max(e => e.Date).ToString("dd MMM yyyy");
        return $"{start} - {end}";
    }
}
